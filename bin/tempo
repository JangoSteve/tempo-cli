#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'tempo'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/tempo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/tempo now"
  exit 64
end

include GLI::App

program_desc 'Command line time tracking by project'

version Tempo::VERSION

# Initial setup

#Load Projects
@projects = ['sheep hearding',
            'horticulture - basement mushrooms',
            'horticulture - backyard bonsai',
            ]

@projects.sort!
@current_project = 'horticulture - basement mushrooms'

# GLOBAL OPTIONS

desc 'verbose output'
switch [:v,:verbose]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

# COMMAND: PROJECT

desc 'Manage the Projects that timed tasks are assigned to'
long_desc "Manage the Projects that timed tasks are assigned to.

By default, lists all the projects that a timed task can be assigned to.
The active project will be marked by an asterisk. If suplied with arguments
and no command options, a new project will be added.

example:
tempo project 'my new project'

Arguments supplied to --list and --delete will use fuzzy matching."

arg_name '"name of the project"'
command [:project, :p] do |c|

  c.desc 'List Projects'
  c.long_desc "Lists all projects that match the supplied argument"
  c.switch [:l, :list], negatable: false

  c.desc 'Delete a Project'
  c.default_value nil
  c.flag [:d, :delete]

  c.action do |global_options,options,args|

    if global_options[:v]
      Tempo::Views::options_report global_options, options, args
    end

    if options[:delete]

      project = Tempo::reassemble_the args, options[:delete]

      # first arg without quotes from GLI will be the value of delete
      matches = Tempo::fuzzy_match @projects, args

      if matches.length == 0
        request = args.join(" ")
        raise "no such project '#{request}'"
      elsif matches.length > 1
        puts "The following projects matched your search:"
        matches.each do |m|
          puts "  #{m}"
        end
        puts "Please refine your search"
      else
        project = matches[0]

        if project == @current_project
          raise "cannot delete the active project"
        end

        if @projects.include?(project)
          @projects.delete(project)
          if !options[:list]
            puts "deleted project '#{project}'"
          else
            Tempo::Views::projects_list @projects, @current_project
          end
        end
      end

    # Add a project
    elsif !options[:list] && !args.empty?

      project = Tempo::reassemble_the args

      if @projects.include? project
        raise "project '#{project}' already exists"
      else
        @projects << project
        puts "added project '#{project}'"
      end

    # List projects
    else
      if args.empty?
        Tempo::Views::projects_list @projects, @current_project
      else
        project = Tempo::reassemble_the args
        matches = Tempo::fuzzy_match @projects, args
        if matches.empty?
          puts "no projects match '#{project}'"
        else
          Tempo::Views::projects_list matches, @current_project
        end
      end
    end
  end
end

desc 'Checkout a project to track time against'
arg_name '"name of the project"'

command [:checkout, :c] do |c|

  c.desc 'Add and checkout a new project'
  c.flag [:a, :add]

  c.action do |global_options,options,args|

    if global_options[:v]
      Tempo::Views::options_report global_options, options, args
    end

    # Add a project
    if options[:add]

      project = Tempo::reassemble_the args, options[:add]

      puts "attempting to add #{project}"
      if @projects.include? project
        raise "project '#{project}' already exists"
      else
        @projects << project
        current_project = project
        puts "switched to new project '#{project}'"
      end

    # checkout existing project
    else
      if args.empty?
        # TODO: list the help for checkout
        puts "current project is #{@current_project}"
      else
        project = Tempo::reassemble_the args
        matches = Tempo::fuzzy_match @projects, args
        if matches.empty?
          puts "no projects match '#{project}'"
        elsif matches.length > 1
          puts "multiple projects found:"
          Tempo::Views::projects_list matches, @current_project
        else
          project = matches[0]
          if @current_project == project
            puts "already on project '#{project}'"
          else
            @current_project = project
            puts "switched to project '#{matches[0]}'"
          end
        end
      end
    end
  end
end

desc 'Describe begin here'
arg_name 'Describe arguments to begin here'
command :begin do |c|
  c.action do |global_options,options,args|
    puts "begin command ran"
  end
end

desc 'Describe end here'
arg_name 'Describe arguments to end here'
command :end do |c|
  c.action do |global_options,options,args|
    puts "end command ran"
  end
end

desc 'Describe report here'
arg_name 'Describe arguments to report here'
command :report do |c|
  c.action do |global_options,options,args|
    puts "report command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
