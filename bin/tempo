#!/usr/bin/env ruby

# In development, you need to use `bundle exec bin/tempo` to run this app
require 'gli'
require 'tempo'
require 'pry'
include GLI::App

program_desc 'Command line time tracking by project'

version Tempo::VERSION

# == GLOBAL OPTIONS ==

desc 'verbose output'
switch [:v,:verbose]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

# COMMAND: PROJECT

desc 'Manage the Projects that timed tasks are assigned to'
long_desc "Manage the Projects that timed tasks are assigned to.

By default, lists all the projects that a timed task can be assigned to.
The active project will be marked by an asterisk. If suplied with arguments
and no command options, a new project will be added.

example:
tempo project 'my new project'

Arguments supplied to --list and --delete will use fuzzy matching."

arg_name '"name of the project"'
command [:project, :p] do |c|

  c.desc 'List Projects'
  c.long_desc "Lists all projects that match the supplied argument"
  c.switch [:l, :list], negatable: false

  c.desc 'Delete a Project'
  c.default_value nil
  c.flag [:d, :delete]

  c.action do |global_options,options,args|

    if global_options[:v]
      Tempo::Views::options_report global_options, options, args
    end

    # delete a project
    #
    if options[:delete]
      Tempo::Controllers::ProjectsController.delete options, args

    elsif !options[:list] && !args.empty?
      Tempo::Controllers::ProjectsController.add args

    else
      Tempo::Controllers::ProjectsController.index args
    end
  end
end

desc 'Checkout a project to track time against'
arg_name '"name of the project"'

command [:checkout, :c] do |c|

  c.desc 'Add and checkout a new project'
  c.flag [:a, :add]

  c.action do |global_options,options,args|

    if global_options[:v]
      Tempo::Views::options_report global_options, options, args
    end

    # Add and checkout a project
    #
    if options[:add]

      project = Tempo::reassemble_the args, options[:add]

      puts "attempting to add #{project}"
      if @projects.list.include? project
        raise "project '#{project}' already exists"
      else
        @projects.new({ title: project, current: true })
        @projects.save_to_file
        @projects.list << project
        Tempo::Model::Project.current = Tempo::Model::Project.find( "title", project )
        puts "switched to new project '#{project}'"
      end

    # checkout existing project
    else
      if args.empty?
        # TODO: list the help for checkout
        puts "current project is #{Tempo::Model::Project.current.title}"
      else

        project = Tempo::reassemble_the args

        #TODO: use project.find_by
        matches = Tempo::fuzzy_match @projects, args, "title"
        if matches.empty?
          puts "no projects match '#{project}'"
        elsif matches.length > 1
          puts "multiple projects found:"
          Tempo::Views::projects_list_view({ projects: matches })
        else
          project = matches[0]
          if Tempo::Model::Project.current == project
            puts "already on project '#{project}'"
          else
            Tempo::Model::Project.current = Tempo::Model::Project.find( "title", project )
            puts "switched to project '#{matches[0]}'"
          end
        end
      end
    end
  end
end

desc 'Describe begin here'
arg_name 'Describe arguments to begin here'
command :begin do |c|
  c.action do |global_options,options,args|
    puts "begin command ran"
  end
end

desc 'Describe end here'
arg_name 'Describe arguments to end here'
command :end do |c|
  c.action do |global_options,options,args|
    puts "end command ran"
  end
end

desc 'Describe report here'
arg_name 'Describe arguments to report here'
command :report do |c|
  c.action do |global_options,options,args|
    puts "report command ran"
  end
end

pre do |global,command,options,args|
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  @projects = Tempo::Controllers::ProjectsController.load
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts exception.backtrace
  true
end

exit run(ARGV)
