#!/usr/bin/env ruby

# In development, you need to use `bundle exec bin/tempo` to run this app
require 'gli'
require 'tempo'
require 'pry'
include GLI::App
# to preserve all the args in ARGV:
# preserve_argv

program_desc 'Command line time tracking by project'

version Tempo::VERSION

# == GLOBAL OPTIONS ==

desc 'verbose output'
long_desc 'include variable reporting in the command output'
switch [:v,:verbose]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

# COMMAND: PROJECT

desc 'Manage the Projects that timed tasks are assigned to'
long_desc "Manage the Projects that timed tasks are assigned to.

By default, lists the current project.

With --list tag an no arguments suplied, lists all projects.

The active project will be marked by an asterisk.

If suplied with arguments and no command options,
a new project will be added.

Arguments supplied to --list, --delete, and --[un]tag
will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# list current project
$ tempo project

# list all projects
$ tempo project --list

# adding a new project titled 'star gazing'
$ tempo project star gazing

# adding a new project tagged 'stellar'
$ tempo project --add star gazing --tag stellar"

arg_name '"name of the project"'
command [:project, :p] do |c|

  c.desc 'Add a Project'
  c.long_desc "Add a Project (default command behavior). When used with --tag adds a new project with the given tag"
  c.switch [:a, :add]

  c.desc 'List Projects'
  c.long_desc "Lists all projects that match the supplied argument"
  c.switch [:l, :list], negatable: false

  c.desc 'Exact Match'
  c.long_desc "Match project with an exact title"
  c.switch [:e, :exact]

  c.desc 'list by or perfom command by project id'
  c.long_desc 'show IDs in output or perform command by matching to id'
  c.switch [:i, :id]

  c.desc 'Delete a Project'
  c.default_value nil
  c.arg_name 'project title'
  c.flag [:d, :delete]

  c.desc 'Tag a Project'
  c.long_desc "Tag a project with one-word tags. Pass multiple tags in quotes to add multiple tags"
  c.default_value nil
  c.arg_name 'tagword'
  c.flag [:t, :tag]

  c.desc 'Untag a Project'
  c.default_value nil
  c.arg_name 'tagword'
  c.flag [:u, :untag]

  c.action do |global_options, options, args|

    controller = Tempo::Controllers::Projects

    # tag a project
    #
    if options[:tag]
      controller.tag options, args

    # untag a project
    #
    elsif options[:untag]
      controller.tag options, args

    # delete a project
    #
    elsif options[:delete]
      controller.delete options, args

    # add a project
    #
    elsif !options[:list] && !args.empty?
      controller.add options, args

    elsif !options[:list] && args.empty?
      controller.show_active

    # list projects, fiter by args
    #
    else
      controller.index options, args
    end
  end
end

# COMMAND: CHECKOUT

desc 'Checkout a project to track time against'
long_desc "Checkout the Projects that timed tasks are assigned to.

Arguments supplied will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# checking out an existing project titled 'star gazing'
$ tempo checkout star gazing

# adding and checking out a new project titled 'star gazing'
$ tempo checkout -a star gazing"

arg_name '"name of the project"'
command [:checkout, :c] do |c|

  c.desc 'Add and Checkout a new project'
  c.arg_name 'project title'
  c.flag [:a, :add]

  c.desc 'use an exact match for project title'
  c.switch [:e, :exact]

  c.desc 'checkout by project id'
  c.switch [:i, :id]

  c.action do |global_options,options,args|

    controller = Tempo::Controllers::Checkout

    # add and checkout a project
    #
    if options[:add]
      controller.add_project options, args

    # checkout existing project
    else
      if args.empty?
        controller.assistance
      else
        controller.existing_project options, args
      end
    end
  end
end


# COMMAND: ARRANGE

desc 'Arrange project hierarchy'
long_desc "Arrange projects into a parent/child hierarchy

New projects are added as root projects by default.

Use the --child flag with the project command to add a new project as the child of the current project

Use arrange to arrange existing projects as child or root projects.

Arguments supplied will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# Add a new project as a child of the current project
$ tempo checkout aquascaping
$ tempo project --child mow the seagrass

# Arrange an existing project as a root project
$ tempo arrange << aquascaping

# Arrange an existing project as a child project
$ tempo arrange aquascaping << coral pruning"

arg_name '[parent project] : child project'
command [:arrange, :a ] do |c|

  c.desc 'use an exact match for project title'
  c.switch [:e, :exact]

  c.desc 'checkout by project id'
  c.switch [:i, :id]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Arrange
    controller.parse options, args
  end
end

# COMMAND: EDIT

# COMMAND: START

desc 'Start a time entry'
long_desc "Starts a new time entry, and closes out any running time entries.

You can also add a description of the time entry.

To start a time entry at a time other than the current, pass it in as an argument
to the --at flag.  This will accept a number of human readable formats, multiple
word timeframes should be enclosed in quotes

examples:

tempo start learning how to stop, drop, and roll --at 'yesterday at 5:00 in the evening'
"


arg_name 'description'
command [:start, :s] do |c|

  c.desc 'end the entry at a given time'
  c.arg_name 'end time'
  c.flag [:e, :end]

  c.desc 'start time'
  c.arg_name 'start the time entry at the given time'
  c.flag [:a, :at]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Start

    controller.start_timer options, args
  end
end

# COMMAND: END

desc 'End a time entry'
long_desc "Closes out any running time entries.

You can optionally add a description of the time entry, which will overwrite the current description.

To end a time entry at a time other than the current, pass it in as an argument
to the --at flag.  This will accept a number of human readable formats, multiple
word timeframes should be enclosed in quotes.

examples:

# creating an entry at 4:55pm
$ tempo start --at 16:55 practicing the human torch trick

# ending it 5 minutes later and changing the description
$ tempo end learning how to stop, drop, and roll --at 'today at 5:00 in the evening'
"


arg_name 'time out, defaults to now'
command [:end, :e] do |c|

  c.desc 'end time'
  c.arg_name 'end the current time entry at the given time'
  c.flag [:a, :at]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::End

    controller.end_timer options, args
  end
end

# COMMAND: REPORT

desc 'Report time entries'
arg_name 'args'
command :report do |c|

  c.desc 'from date'
  c.arg_name 'begin time records on this date'
  c.flag [:f, :from]

  c.desc 'to date'
  c.arg_name 'end time records on this date'
  c.flag [:t, :to]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Report

    controller.report options, args
  end
end

pre do |global,command,options,args|
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  if global[:v]
    Tempo::Views::options_report command.name, global, options, args
  end

  Tempo::Views::initialize_view_options command.name, global, options

  # Load the stored records
  Tempo::Controllers::Records.initialize_from_records options, args

  # TODO: send formats in through global options, and then:
  # Tempo::Views::Reporter.add_formats

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only

  Tempo::Views::Reporter.report

end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling

  # remove before distribution:
  puts exception.backtrace

  true
end

exit run(ARGV)
