#!/usr/bin/env ruby

# In development, you need to use `bundle exec bin/tempo` to run this app
require 'gli'
require 'tempo'
require 'pry'
include GLI::App

program_desc 'Command line time tracking by project'

version Tempo::VERSION

# == GLOBAL OPTIONS ==

desc 'verbose output'
switch [:v,:verbose]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

# COMMAND: PROJECT

desc 'Manage the Projects that timed tasks are assigned to'
long_desc "Manage the Projects that timed tasks are assigned to.

By default, lists all the projects.
The active project will be marked by an asterisk. If suplied with arguments
and no command options, a new project will be added.

example:
tempo project 'my new project'

Arguments supplied to --list and --delete will use fuzzy matching."

arg_name '"name of the project"'
command [:project, :p] do |c|

  c.desc 'List Projects'
  c.long_desc "Lists all projects that match the supplied argument"
  c.switch [:l, :list], negatable: false

  c.desc 'Delete a Project'
  c.default_value nil
  c.flag [:d, :delete]

  c.action do |global_options,options,args|

    projects = Tempo::Controllers::Projects

    # delete a project
    #
    if options[:delete]
      projects.delete options, args

    # add a project
    #
    elsif !options[:list] && !args.empty?
      projects.add args

    # list projects
    #
    else
      projects.index args
    end
  end
end

# COMMAND: CHECKOUT

desc 'Checkout a project to track time against'
arg_name '"name of the project"'

command [:checkout, :c] do |c|

  c.desc 'Add and checkout a new project'
  c.flag [:a, :add]

  c.action do |global_options,options,args|

    checkout = Tempo::Controllers::Checkout

    # Add and checkout a project
    #
    if options[:add]
      checkout.add_project options, args

    # checkout existing project
    else
      if args.empty?
        checkout.assistance
      else
        checkout.existing_project args
      end
    end
  end
end

desc 'Describe begin here'
arg_name 'Describe arguments to begin here'
command :begin do |c|
  c.action do |global_options,options,args|
    puts "begin command ran"
  end
end

desc 'Describe end here'
arg_name 'Describe arguments to end here'
command :end do |c|
  c.action do |global_options,options,args|
    puts "end command ran"
  end
end

desc 'Describe report here'
arg_name 'Describe arguments to report here'
command :report do |c|
  c.action do |global_options,options,args|
    puts "report command ran"
  end
end

pre do |global,command,options,args|
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  if global[:v]
    Tempo::Views::options_report global, options, args
  end

  Tempo::Controllers::Projects.load
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling

  puts exception.backtrace

  true
end

exit run(ARGV)
